const path = require("path");
const fs = require("fs");
const webpack = require("webpack");
const CleanObsoleteChunks = require("webpack-clean-obsolete-chunks");
const AssetsPlugin = require("assets-webpack-plugin");
const ChunkManifestPlugin = require("chunk-manifest-webpack-plugin");

const isProd = process.env.NODE_ENV === "production";

const paths = {
  client: {
    output: path.resolve(__dirname, "dist", "client")
  },
  server: {
    output: path.resolve(__dirname, "dist", "server")
  }
};

// Use chunkhash in prod for chunk-contents dependent hash, and whole build
// hash in dev for faster compilation times.
const filename = isProd ? "[name].[chunkhash].js" : "[name].[hash].js";

module.exports = [
  {
    target: "web",
    entry: {
      index: "./src/client/index.js"
    },
    output: {
      path: paths.client.output,
      chunkFilename: filename,
      filename: filename
    },
    module: {
      rules: [
        { test: /\.js$/, exclude: /node_modules/, loader: "babel-loader" }
      ]
    },
    devtool: isProd ? "source-map" : "cheap-module-eval-source-map",
    plugins: [
      new CleanObsoleteChunks(),
      // Enable scope/variable hoisting with webpack 3 and ES modules
      new webpack.optimize.ModuleConcatenationPlugin(),
      // Use path names instead of autogenerated ids for asset names
      new webpack.NamedModulesPlugin(),
      // Generate a json manifest with the entry points and assets names to use
      // in the server to pass to the HTML page template
      new AssetsPlugin({
        filename: "assets-manifest.json",
        path: paths.client.output
      }),
      // Allows exporting a JSON file that maps chunk ids to their resulting
      // asset files. Webpack can then read this mapping, assuming it is
      // provided somehow on the client, instead of storing a mapping (with
      // chunk asset hashes) in the bootstrap script, which allows to actually
      // leverage long-term caching.
      // https://github.com/soundcloud/chunk-manifest-webpack-plugin
      new ChunkManifestPlugin({
        filename: "chunk-manifest.json",
        manifestVariable: "webpackManifest"
      })
    ]
  },
  {
    target: "node",
    entry: { index: "./src/server/index.js" },
    output: {
      path: paths.server.output,
      chunkFilename: "[name].js",
      filename: "[name].js"
    },
    module: {
      rules: [
        { test: /\.js$/, exclude: /node_modules/, loader: "babel-loader" }
      ]
    },
    externals: getExternals(),
    plugins: [
      new CleanObsoleteChunks(),
      // Enable scope/variable hoisting with webpack 3 and ES modules
      new webpack.optimize.ModuleConcatenationPlugin(),
      // Use path names instead of autogenerated ids for asset names
      new webpack.NamedModulesPlugin()
    ]
  }
];

function getExternals() {
  const externals = {};
  // Don't bundle any node_modules, both to avoid a massive bundle, and problems
  // with modules that are incompatible with webpack bundling.
  fs
    .readdirSync("node_modules")
    .filter(function(module) {
      return [".bin"].indexOf(module) === -1;
    })
    .forEach(function(module) {
      externals[module] = "commonjs " + module;
    });
  return externals;
}
