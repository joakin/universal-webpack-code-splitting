const path = require("path");
const fs = require("fs");
const webpack = require("webpack");
const nodeExternals = require("webpack-node-externals");
const CleanWebpackPlugin = require("clean-webpack-plugin");
const CleanObsoleteChunks = require("webpack-clean-obsolete-chunks");
const AssetsPlugin = require("assets-webpack-plugin");
const ChunkManifestPlugin = require("chunk-manifest-webpack-plugin");

const isProd = process.env.NODE_ENV === "production";

const paths = {
  client: {
    output: path.resolve(__dirname, "dist", "client")
  },
  server: {
    output: path.resolve(__dirname, "dist", "server")
  }
};

const babelLoaderOptions = targets => ({
  cacheDirectory: true,
  presets: [
    [
      "env",
      {
        loose: true,
        modules: false,
        targets,
        exclude: ["transform-regenerator", "transform-es2015-typeof-symbol"]
      }
    ]
  ],
  plugins: [
    "syntax-dynamic-import",
    "transform-object-assign",
    "transform-react-constant-elements",
    ["transform-react-jsx", { pragma: "h" }],
    [
      "jsx-pragmatic",
      {
        module: "preact",
        export: "h",
        import: "h"
      }
    ]
  ]
});

const commonPlugins = [
  new CleanObsoleteChunks(),
  // Enable scope/variable hoisting with webpack 3 and ES modules
  new webpack.optimize.ModuleConcatenationPlugin(),
  // Use path names instead of autogenerated ids for asset names
  new webpack.NamedModulesPlugin()
].concat(
  isProd
    ? [
        new webpack.LoaderOptionsPlugin({
          minimize: true,
          debug: false
        }),
        new webpack.DefinePlugin({
          "process.env": {
            NODE_ENV: JSON.stringify(process.env.NODE_ENV)
          }
        })
      ]
    : []
);

module.exports = [
  {
    target: "web",
    entry: {
      index: "./src/client/index.js"
    },
    output: {
      path: paths.client.output,
      chunkFilename: "[name].[chunkhash].js",
      filename: "[name].[chunkhash].js"
    },
    module: {
      rules: [
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: {
            loader: "babel-loader",
            options: babelLoaderOptions({ browsers: "ie >= 11" })
          }
        }
      ]
    },
    // devtool: isProd ? "source-map" : "cheap-module-eval-source-map",
    plugins: commonPlugins
      .concat([
        new CleanWebpackPlugin(paths.client.output, { verbose: true }),
        // Generate a json manifest with the entry points and assets names to use
        // in the server to pass to the HTML page template
        new AssetsPlugin({
          prettyPrint: true,
          filename: "assets-manifest.json",
          path: paths.client.output
        }),
        // Allows exporting a JSON file that maps chunk ids to their resulting
        // asset files. Webpack can then read this mapping, assuming it is
        // provided somehow on the client, instead of storing a mapping (with
        // chunk asset hashes) in the bootstrap script, which allows to actually
        // leverage long-term caching.
        // https://github.com/soundcloud/chunk-manifest-webpack-plugin
        new ChunkManifestPlugin({
          filename: "chunk-manifest.json",
          manifestVariable: "webpackManifest"
        })
      ])
      .concat(isProd ? [new webpack.optimize.UglifyJsPlugin()] : [])
  },
  {
    target: "node",
    entry: { index: "./src/server/index.js" },
    output: {
      path: paths.server.output,
      chunkFilename: "[name].js",
      filename: "[name].js"
    },
    module: {
      rules: [
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: {
            loader: "babel-loader",
            options: babelLoaderOptions({ node: "6.10" })
          }
        }
      ]
    },
    externals: nodeExternals({
      // do not externalize dependencies that need to be processed by webpack.
      // you should also whitelist deps that modifies `global` (e.g. polyfills)
      whitelist: /\.css$/
    }),
    plugins: commonPlugins.concat([
      new CleanWebpackPlugin(paths.server.output, { verbose: true })
    ])
  }
];
